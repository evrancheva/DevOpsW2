swagger: "2.0"
info: 
  version: 1.0.0
  title: Simple API
  description: A simple API to learn how to write OpenAPI Specification
schemes: 
  - https
host: simple.api
basePath: /openapi101
paths:
  /persons:
    get:
      summary: Gets some persons
      description: Returns a list containing all persons.
      parameters:
       - $ref: '#/parameters/userAgent'
       - $ref: "#/parameters/pageSize"
       - $ref: "#/parameters/pageNumber"
      responses:
        200:
          description: A list of Person
          schema:
            $ref: "#/definitions/Persons"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
          
    post:
      summary: Creates a person
      description: Adds a new person to the persons list.
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - text/html
      parameters:
        - name: username
          in: formData
          required: true
          pattern: '[a-z0-9]{8,64}'
          minLength: 8
          maxLength: 64
          type: string
        - name: firstname
          in: formData
          type: string
        - name: lastname
          in: formData
          type: string
        - name: dateOfBirth
          in: formData
          type: string
          format: date
      responses:
        204:
          description: Persons succesfully created.
          headers:
            X-Rate-Limit-Remaining:
              type: integer
            X-Rate-Limit-Reset:
              type: string
              format: date-time
        400:
          description: Persons couldn't have been created.
        500:
          $ref: "#/responses/Standard500ErrorResponse"
        
          
          
  /persons/{username}:
    get:
      summary: Gets a person
      description: Returns a single person for its username
      parameters:
      - $ref: '#/parameters/userAgent'
      - $ref: "#/parameters/username"
      responses:
        200:
          description: A Person
          schema:
            required:
              - username
            properties:
              firstName:
                type: string
              lastName:
                type: string
              username:
                type: string
        404:
          description: The Person does not exists.
        500:
          $ref: "#/responses/Standard500ErrorResponse"
    delete:
      summary: Deletes a person
      description: Delete a single person identified via its username
      responses:
        '204':
          description: Person successfully deleted.
          headers:
            X-Rate-Limit-Remaining:
              type: integer
            X-Rate-Limit-Reset:
              type: string
              format: date-time
        '404':
          $ref: '#/responses/PersonDoesNotExistResponse'
        '500':
          $ref: '#/responses/Standard500ErrorResponse'
        default:
          $ref: '#/responses/TotallyUnexpectedResponse'
          
  # /persons/{username}/friends:
  #   parameters: 
  #     - $ref: '#/parameters/userAgent'
  #     - $ref: "#/parameters/username"
  #   get:
  #     summary: Gets a person's friends
  #     description: Returns a list containing all persons. The list supports paging.
  #     parameters:
  #     - $ref: "#/parameters/pageSize"
  #     - $ref: "#/parameters/pageNumber"
  #     responses:
  #       200:
  #         description: A person's friends list 
  #         schema:
  #           $ref: "#/definitions/Persons"
  #       404:
  #         $ref: "#/responses/PersonDoesNotExistResponse"
  #       500:
  #         $ref: "#/responses/Standard500ErrorResponse"
    
  # /images:
  #     parameters:
  #       - $ref: '#/parameters/userAgent'
  #     post:
  #       summary: Uploads an image
  #       consumes:
  #       - multipart/form-data
  #       parameters:
  #         - name: image
  #           in: formData
  #           type: file
  #       responses:
  #         '200':
  #           description: Image's ID
  #           schema:
  #             properties:
  #               imageId:
  #                 type: string
                  
  # /images/{imageId}:
  #   parameters:
  #     - $ref: '#/parameters/userAgent'
  #   get:
  #     summary: Gets an image
  #     parameters:
  #       - name: imageId
  #         in: path
  #         required: true
  #         type: string
  #     produces:
  #       - image/png
  #       - image/gif
  #       - image/jpeg
  #       - application/json
  #       - application/x-yaml
  #     responses:
  #       '200':
  #         description: The image
  #         headers:
  #           X-Rate-Limit-Remaining:
  #             type: integer
  #           X-Rate-Limit-Reset:
  #             type: string
  #             format: date-time
  #       '404':
  #         description: Image do not exists
  #         headers:
  #           X-Rate-Limit-Remaining:
  #             type: integer
  #           X-Rate-Limit-Reset:
  #             type: string
  #             format: date-time
  #       '500':
  #         $ref: '#/responses/Standard500ErrorResponse'
  #       default:
  #         $ref: '#/responses/TotallyUnexpectedResponse'
  
definitions:
  Person:
    required:
      - username
    properties:
      firstName:
        type: string
      lastName:
        type: string
      username:
        type: string
        pattern: "[a-z0-9]{8,64}"
        minLength: 8
        maxLength: 64
      dateOfBirth:
        type: string
        format: date
      lastTimeOnline:
        type: string
        format: date-time
        readOnly: true
      avatarBase64PNG:
        type: string
        format: byte
      pokenLanguages:
        $ref: "#/definitions/SpokenLanguages"
  
  # SpokenLanguages:
  #   additionalProperties:
  #     type: string
  #   properties:
  #     defaultLanguage:
  #       type: string
  #       default: english
        
  Persons:
    type: array
    minItems: 10
    maxItems: 100
    uniqueItems: true
    items:
      $ref: "#/definitions/Person"
      
  # PagedPersonsV1:
  #   properties:
  #     items:
  #       type: array
  #       items:
  #         $ref: "#/definitions/Person"
  #     totalItems:
  #       type: integer
  #     totalPages:
  #       type: integer
  #     pageSize:
  #       type: integer
  #     currentPage:
  #       type: integer
        
  # PagedPersonsV2:
  #   properties:
  #     items:
  #       type: array
  #       items:
  #         $ref: "#/definitions/Person"
  #     paging:
  #       $ref: "#/definitions/Paging"

  # Paging:
  #   properties:
  #     totalItems:
  #       type: integer
  #     totalPages:
  #       type: integer
  #     pageSize:
  #       type: integer
  #     currentPage:
  #       type: integer
        
  # PagedPersons:
  #   allOf:
  #     - $ref: "#/definitions/Persons"
  #     - $ref: "#/definitions/Paging"
  
  # PagedCollectingItems:
  #   allOf:
  #     - properties:
  #         items:
  #           type: array
  #           minItems: 10
  #           maxItems: 100
  #           uniqueItems: true
  #           items:
  #           - $ref: "#/definitions/CollectingItem"
  #           - $ref: "#/definitions/Paging"
    
  # CollectingItem:
  #   discriminator: itemType
  #   required:
  #     - itemType
  #   properties:
  #     itemType:
  #       type: string
  #       enum:
  #         - Vinyl
  #         - VHS
  #     imageId:
  #       type: string
  #     maxPrice:
  #       type: number
  #       format: double
  #       minimum: 0
  #       maximum: 10000
  #       exclusiveMinimum: true
  #       exclusiveMaximum: false
      
  Error:
    required:
      - code
      - message
    properties:
      code:
        type: string
      message:
        type: string
  
  # ErrorMessage:
  #   properties:
  #     longMessage:
  #       type: string
  #     shortMessage:
  #       type: string
  
  # MultilingualErrorMessage:
  #   additionalProperties:
  #     $ref: "#/definitions/ErrorMessage"
  #   properties:
  #     defaultLanguage:
  #       $ref: "#/definitions/ErrorMessage"

        
responses:
    Standard500ErrorResponse:
      description: An unexpected error occured.
      schema:
        $ref: "#/definitions/Error"
    PersonDoesNotExistResponse:
      description: Person does not exist.
    TotallyUnexpectedResponse:
      description: A totally unexpected response
      
parameters:
  username:
    name: username
    in: path
    required: true
    description: The person's username
    type: string
  pageSize:
    name: pageSize
    in: query
    description: Number of persons returned
    type: integer
    format: int32
    minimum: 0
    exclusiveMinimum: true
    maximum: 100
    exclusiveMaximum: false
    multipleOf: 10
    default: 20
  pageNumber:
    name: pageNumber
    in: query
    description: Page number
    type: integer
    default: 1
  includeNonVerifiedUsers:
    name: includeNonVerifiedUsers
    in: query
    type: boolean
    default: false
    allowEmptyValue: true
  sortPersons:
    name: sort
    in: query
    type: array
    uniqueItems: true
    minItems: 1
    maxItems: 3
    collectionFormat: pipes
    items:
      type: string
      pattern: '[-+](username|lastTimeOnline|firstname|lastname)'
    default:
      - -lastTimeOnline
      - +username
  filterItemTypes:
    name: itemType
    in: query
    type: array
    collectionFormat: multi
    uniqueItems: true
    items:
      type: string
      enum:
        - AudioCassette
        - Vinyl
        - VHS
  userAgent:
    name: User-Agent
    type: string
    in: header
    required: true